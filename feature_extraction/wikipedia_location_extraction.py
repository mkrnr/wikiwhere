'''
Created on Jan 11, 2016

@author: Martin Koerner <info@mkoerner.de>
'''


from SPARQLWrapper import SPARQLWrapper, JSON
from SPARQLWrapper.SPARQLExceptions import QueryBadFormed

import argparse
from utils import dbpedia_mapping

# generate help text for arguments
parser = argparse.ArgumentParser(description='Extracts geo locations from a list of wikipedia articles given in the xml dump format.')
parser.add_argument('input',
                   help='a file path to the output file generated by this program')
parser.add_argument("--output", dest="output", metavar='output path', type=str)
parser.add_argument("--language", dest="language", metavar='two-letter country code', nargs='?', type=str, help="on of the language editions of dbpedia (default: en):")

args = parser.parse_args()


input_file=args.input

# get mapping from two-letter country code to dbpedia endpoint URL

dbpedia_url = dbpedia_mapping.language_to_dbpedia_url(args.language) 

print "Running on the following dbpedia SPARQL endpoint: " + dbpedia_url

sparql = SPARQLWrapper(dbpedia_url)
# sparql = SPARQLWrapper("https://query.wikidata.org/sparql")
# sparql = SPARQLWrapper("https://query.wikidata.org/bigdata/namespace/wdq/sparql")

match_out = open(args.output, "wb")  # open output


# SPARQL query that 
namespaces = """
PREFIX dbo: <http://dbpedia.org/resource/classes#>
PREFIX dbp: <http://dbpedia.org/property/>
"""

location_query = """        
{
    SELECT * WHERE {
        ?match dbp:latitude ?lat .
        ?match dbp:longitude ?long
    }
}
UNION
{
    SELECT * WHERE {
        ?match geo:lat ?lat .
        ?match geo:long ?long
    }
}
UNION
{
    SELECT * WHERE {
        ?match dbp:latDeg ?latDeg .
        ?match dbp:latMin ?latMin .
        ?match dbp:latSec ?latSec .
        ?match dbp:lonDeg ?longDeg .
        ?match dbp:lonMin ?longMin .
        ?match dbp:lonSec ?longSec
    }
}
UNION
{
    SELECT * WHERE {
        ?match dbp:latd ?lat .
        ?match dbp:longd ?long
    }
}



"""
query_string = namespaces + """
SELECT * WHERE {
    ?match foaf:isPrimaryTopicOf """+"<http://en.wikipedia.org/wiki/New_York_City>"+""" .
    """+location_query+"""
}
"""
# TODO replace <http://en.wikipedia.org/wiki/Koblenz> with a string

match_count = 0
domain_matches = {}



query_string_with_offset = query_string 

sparql.setQuery(query_string_with_offset)
sparql.setReturnFormat(JSON)
try:
    results = sparql.query().convert()
except QueryBadFormed:
    print "SPARQL query bad formed: " + query_string_with_offset


if len(results["results"]["bindings"]) > 0:
    for result in results["results"]["bindings"]:
        # TODO write if for lang and lat lat long latDeg latMin latSec longDeg longSec
        match_string = result["lat"]["value"] + "\t" + result["long"]["value"]+result["match"]["value"]
        # print match_string
        print match_string.encode('utf8') + "\n"

        #match_out.write(match_string.encode('utf8') + "\n")
        # print match_string.encode('utf8')


match_out.close()
